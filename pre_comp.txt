################
##  miranda
################

The scc-sst-example-1.py script contains a KNL-like model with 28 PEs and 30
mesh stops organized as a 6x5. The two remaining mesh stops are attached to
memory controllers. The PEs run with the SingleStream or SpMV generators. 
Each Mem is using the timingDRAM model. You can open the script to see the
parameters for the memory and all of the caches.

######################################################
##                                                  ##
##   Mem = memory                                   ##
##   Core = CPU + L1 + L2 + L3 slice                ##
##                                                  ##
##   Core -- Core -- Core -- Core -- Core -- Core   ##
##    |       |       |       |       |       |     ##
##   Core -- Core -- Core -- Core -- Core -- Core   ##
##    |       |       |       |       |       |     ##
##   Mem  -- Core -- Core -- Core -- Core -- Mem    ##
##    |       |       |       |       |       |     ##
##   Core -- Core -- Core -- Core -- Core -- Core   ##
##    |       |       |       |       |       |     ##
##   Core -- Core -- Core -- Core -- Core -- Core   ##
##                                                  ##
######################################################

You can change the following model parameters via the command line by passing
them using the --model-options "<arg list>" parameter.

-f    stat output file, default ./example1.csv
-c    core frequency, default 2.5GHz
-l3   size of l3 with units, default 1MiB
-s    number of cores running the singlestream generator, default 20

You can launch the model using this command line (you can also experiment with
different numbers of ranks and threads to see what happens with the simulation
time):  sst scc-sst-example-1.py


################
##  ember
################

The test directory in ember contains multiple scripts that you can use to explore
network topologies and traffic patterns. The simplest script to use is emberLoad.py,
which accepts a number of parameters via the command line. To familiarize yourselves
with ember, we suggest simulating a 2D halo exchange on a torus. 

Although you are free to experiment with all of the available model options, we
suggest that you try changing the the size of the torus, the number of iterations,
or even using different topologies to see how these affect the
run time (reported as simulated time at the end of the run).

You can launch the model using this command line (you can also experiment with
different numbers of ranks and threads to see what happens with the simulation
time *this is note the simulated time reported at the end of the run*):
sst --model-options "--topo=torus --shape=6x6x6 --cmdLine=\"Init\" --cmdLine=\"Halo2D iterations=1000 \" --cmdLine=\"Fini\"" emberLoad.py

